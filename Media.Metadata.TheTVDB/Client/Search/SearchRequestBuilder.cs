// <auto-generated/>
using ApiSdk.Search.Remoteid;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Search {
    /// <summary>
    /// Builds and executes requests for operations under \search
    /// </summary>
    public class SearchRequestBuilder : BaseRequestBuilder {
        /// <summary>The remoteid property</summary>
        public RemoteidRequestBuilder Remoteid { get =>
            new RemoteidRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new SearchRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search{?company*,country*,director*,language*,limit*,network*,offset*,primaryType*,q*,query*,remote_id*,type*,year*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new SearchRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search{?company*,country*,director*,language*,limit*,network*,offset*,primaryType*,q*,query*,remote_id*,type*,year*}", rawUrl) {
        }
        /// <summary>
        /// Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<SearchGetResponse?> GetAsync(Action<RequestConfiguration<SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<SearchGetResponse> GetAsync(Action<RequestConfiguration<SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<SearchGetResponse>(requestInfo, SearchGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<SearchRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public SearchRequestBuilder WithUrl(string rawUrl) {
            return new SearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Our search index includes series, movies, people, and companies. Search is limited to 5k results max.
        /// </summary>
        public class SearchRequestBuilderGetQueryParameters {
            /// <summary>Restrict results to a specific company (original network, production company, studio, etc).  As an example, &quot;The Walking Dead&quot; would have companies of &quot;AMC&quot;, &quot;AMC+&quot;, and &quot;Disney+&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("company")]
            public string? Company { get; set; }
#nullable restore
#else
            [QueryParameter("company")]
            public string Company { get; set; }
#endif
            /// <summary>Restrict results to a specific country of origin. Should contain a 3 character country code. Currently only used for series and movies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("country")]
            public string? Country { get; set; }
#nullable restore
#else
            [QueryParameter("country")]
            public string Country { get; set; }
#endif
            /// <summary>Restrict results to a specific director.  Generally only used for movies.  Should include the full name of the director, such as &quot;Steven Spielberg&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("director")]
            public string? Director { get; set; }
#nullable restore
#else
            [QueryParameter("director")]
            public string Director { get; set; }
#endif
            /// <summary>Restrict results to a specific primary language.  Should include the 3 character language code.  Currently only used for series and movies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            /// <summary>Limit results.</summary>
            [QueryParameter("limit")]
            public double? Limit { get; set; }
            /// <summary>Restrict results to a specific network.  Used for TV and TV movies, and functions the same as the company parameter with more specificity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("network")]
            public string? Network { get; set; }
#nullable restore
#else
            [QueryParameter("network")]
            public string Network { get; set; }
#endif
            /// <summary>Offset results.</summary>
            [QueryParameter("offset")]
            public double? Offset { get; set; }
            /// <summary>Restrict results to a specific type of company.  Should include the full name of the type of company, such as &quot;Production Company&quot;.  Only used for companies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("primaryType")]
            public string? PrimaryType { get; set; }
#nullable restore
#else
            [QueryParameter("primaryType")]
            public string PrimaryType { get; set; }
#endif
            /// <summary>Alias of the &quot;query&quot; parameter.  Recommend using query instead as this field will eventually be deprecated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
            /// <summary>The primary search string, which can include the main title for a record including all translations and aliases.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
            /// <summary>Search for a specific remote id.  Allows searching for an IMDB or EIDR id, for example.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("remote_id")]
            public string? RemoteId { get; set; }
#nullable restore
#else
            [QueryParameter("remote_id")]
            public string RemoteId { get; set; }
#endif
            /// <summary>Restrict results to a specific entity type.  Can be movie, series, person, or company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>Restrict results to a specific year. Currently only used for series and movies.</summary>
            [QueryParameter("year")]
            public double? Year { get; set; }
        }
    }
}

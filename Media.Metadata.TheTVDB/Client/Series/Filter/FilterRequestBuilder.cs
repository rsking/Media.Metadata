// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Series.Filter
{
    /// <summary>
    /// Builds and executes requests for operations under \series\filter
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    internal partial class FilterRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Series.Filter.FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/series/filter?country={country}&lang={lang}{&company*,contentRating*,genre*,sort*,sortType*,status*,year*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Series.Filter.FilterRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/series/filter?country={country}&lang={lang}{&company*,contentRating*,genre*,sort*,sortType*,status*,year*}", rawUrl)
        {
        }
        /// <summary>
        /// Search series based on filter parameters
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Series.Filter.FilterGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Series.Filter.FilterGetResponse?> GetAsync(Action<RequestConfiguration<global::ApiSdk.Series.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Series.Filter.FilterGetResponse> GetAsync(Action<RequestConfiguration<global::ApiSdk.Series.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::ApiSdk.Series.Filter.FilterGetResponse>(requestInfo, global::ApiSdk.Series.Filter.FilterGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Search series based on filter parameters
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Series.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.Series.Filter.FilterRequestBuilder.FilterRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Series.Filter.FilterRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.Series.Filter.FilterRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.Series.Filter.FilterRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Search series based on filter parameters
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
        internal partial class FilterRequestBuilderGetQueryParameters 
        {
            /// <summary>production company</summary>
            [QueryParameter("company")]
            public double? Company { get; set; }
            /// <summary>content rating id base on a country</summary>
            [QueryParameter("contentRating")]
            public double? ContentRating { get; set; }
            /// <summary>country of origin</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("country")]
            public string? Country { get; set; }
#nullable restore
#else
            [QueryParameter("country")]
            public string Country { get; set; }
#endif
            /// <summary>Genre id. This id can be found using **/genres** endpoint.</summary>
            [QueryParameter("genre")]
            public double? Genre { get; set; }
            /// <summary>original language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lang")]
            public string? Lang { get; set; }
#nullable restore
#else
            [QueryParameter("lang")]
            public string Lang { get; set; }
#endif
            /// <summary>sort by results</summary>
            [QueryParameter("sort")]
            public global::ApiSdk.Series.Filter.GetSortQueryParameterType? Sort { get; set; }
            /// <summary>sort type ascending or descending</summary>
            [QueryParameter("sortType")]
            public global::ApiSdk.Series.Filter.GetSortTypeQueryParameterType? SortType { get; set; }
            /// <summary>status</summary>
            [QueryParameter("status")]
            public double? Status { get; set; }
            /// <summary>release year</summary>
            [QueryParameter("year")]
            public double? Year { get; set; }
        }
    }
}
#pragma warning restore CS0618

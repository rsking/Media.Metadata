// <auto-generated/>
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Series.Item.Episodes.Item {
    public class SeasonTypeGetResponse_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The episodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EpisodeBaseRecord>? Episodes { get; set; }
#nullable restore
#else
        public List<EpisodeBaseRecord> Episodes { get; set; }
#endif
        /// <summary>The base record for a series. All series airs time like firstAired, lastAired, nextAired, etc. are in US EST for US series, and for all non-US series, the time of the showâ€™s country capital or most populous city. For streaming services, is the official release time. See https://support.thetvdb.com/kb/faq.php?id=29.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SeriesBaseRecord? Series { get; set; }
#nullable restore
#else
        public SeriesBaseRecord Series { get; set; }
#endif
        /// <summary>
        /// Instantiates a new SeasonTypeGetResponse_data and sets the default values.
        /// </summary>
        public SeasonTypeGetResponse_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SeasonTypeGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SeasonTypeGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"episodes", n => { Episodes = n.GetCollectionOfObjectValues<EpisodeBaseRecord>(EpisodeBaseRecord.CreateFromDiscriminatorValue)?.ToList(); } },
                {"series", n => { Series = n.GetObjectValue<SeriesBaseRecord>(SeriesBaseRecord.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<EpisodeBaseRecord>("episodes", Episodes);
            writer.WriteObjectValue<SeriesBaseRecord>("series", Series);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

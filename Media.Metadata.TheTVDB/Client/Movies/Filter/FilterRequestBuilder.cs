// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Movies.Filter {
    /// <summary>
    /// Builds and executes requests for operations under \movies\filter
    /// </summary>
    public class FilterRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new FilterRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movies/filter?country={country}&lang={lang}{&company*,contentRating*,genre*,sort*,status*,year*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new FilterRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilterRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movies/filter?country={country}&lang={lang}{&company*,contentRating*,genre*,sort*,status*,year*}", rawUrl) {
        }
        /// <summary>
        /// Search movies based on filter parameters
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<FilterGetResponse?> GetAsync(Action<RequestConfiguration<FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<FilterGetResponse> GetAsync(Action<RequestConfiguration<FilterRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<FilterGetResponse>(requestInfo, FilterGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Search movies based on filter parameters
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<FilterRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<FilterRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public FilterRequestBuilder WithUrl(string rawUrl) {
            return new FilterRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Search movies based on filter parameters
        /// </summary>
        public class FilterRequestBuilderGetQueryParameters {
            /// <summary>production company</summary>
            [QueryParameter("company")]
            public double? Company { get; set; }
            /// <summary>content rating id base on a country</summary>
            [QueryParameter("contentRating")]
            public double? ContentRating { get; set; }
            /// <summary>country of origin</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("country")]
            public string? Country { get; set; }
#nullable restore
#else
            [QueryParameter("country")]
            public string Country { get; set; }
#endif
            /// <summary>genre</summary>
            [QueryParameter("genre")]
            public double? Genre { get; set; }
            /// <summary>original language</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lang")]
            public string? Lang { get; set; }
#nullable restore
#else
            [QueryParameter("lang")]
            public string Lang { get; set; }
#endif
            /// <summary>sort by results</summary>
            [QueryParameter("sort")]
            public GetSortQueryParameterType? Sort { get; set; }
            /// <summary>status</summary>
            [QueryParameter("status")]
            public double? Status { get; set; }
            /// <summary>release year</summary>
            [QueryParameter("year")]
            public double? Year { get; set; }
        }
    }
}

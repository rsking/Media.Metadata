// <auto-generated/>
using ApiSdk.Movies.Filter;
using ApiSdk.Movies.Item;
using ApiSdk.Movies.Slug;
using ApiSdk.Movies.Statuses;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Movies {
    /// <summary>
    /// Builds and executes requests for operations under \movies
    /// </summary>
    public class MoviesRequestBuilder : BaseRequestBuilder {
        /// <summary>The filter property</summary>
        public FilterRequestBuilder Filter { get =>
            new FilterRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The slug property</summary>
        public SlugRequestBuilder Slug { get =>
            new SlugRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statuses property</summary>
        public StatusesRequestBuilder Statuses { get =>
            new StatusesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ApiSdk.movies.item collection</summary>
        /// <param name="position">id</param>
        public MoviesItemRequestBuilder this[double position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("id", position);
            return new MoviesItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new MoviesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movies{?page*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new MoviesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movies{?page*}", rawUrl) {
        }
        /// <summary>
        /// returns list of movie base records
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<MoviesGetResponse?> GetAsync(Action<RequestConfiguration<MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<MoviesGetResponse> GetAsync(Action<RequestConfiguration<MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<MoviesGetResponse>(requestInfo, MoviesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// returns list of movie base records
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MoviesRequestBuilder WithUrl(string rawUrl) {
            return new MoviesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// returns list of movie base records
        /// </summary>
        public class MoviesRequestBuilderGetQueryParameters {
            /// <summary>page number</summary>
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
    }
}

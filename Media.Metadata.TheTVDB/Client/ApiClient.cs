// <auto-generated/>
using ApiSdk.Artwork;
using ApiSdk.Awards;
using ApiSdk.Characters;
using ApiSdk.Companies;
using ApiSdk.Content;
using ApiSdk.Countries;
using ApiSdk.Entities;
using ApiSdk.Episodes;
using ApiSdk.Genders;
using ApiSdk.Genres;
using ApiSdk.Inspiration;
using ApiSdk.Languages;
using ApiSdk.Lists;
using ApiSdk.Login;
using ApiSdk.Movies;
using ApiSdk.People;
using ApiSdk.Search;
using ApiSdk.Seasons;
using ApiSdk.Series;
using ApiSdk.Sources;
using ApiSdk.Updates;
using ApiSdk.User;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace ApiSdk {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class ApiClient : BaseRequestBuilder {
        /// <summary>The artwork property</summary>
        public ArtworkRequestBuilder Artwork { get =>
            new ArtworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The awards property</summary>
        public AwardsRequestBuilder Awards { get =>
            new AwardsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The characters property</summary>
        public CharactersRequestBuilder Characters { get =>
            new CharactersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The companies property</summary>
        public CompaniesRequestBuilder Companies { get =>
            new CompaniesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The content property</summary>
        public ContentRequestBuilder Content { get =>
            new ContentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The countries property</summary>
        public CountriesRequestBuilder Countries { get =>
            new CountriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The entities property</summary>
        public EntitiesRequestBuilder Entities { get =>
            new EntitiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The episodes property</summary>
        public EpisodesRequestBuilder Episodes { get =>
            new EpisodesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The genders property</summary>
        public GendersRequestBuilder Genders { get =>
            new GendersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The genres property</summary>
        public GenresRequestBuilder Genres { get =>
            new GenresRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The inspiration property</summary>
        public InspirationRequestBuilder Inspiration { get =>
            new InspirationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The languages property</summary>
        public LanguagesRequestBuilder Languages { get =>
            new LanguagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lists property</summary>
        public ListsRequestBuilder Lists { get =>
            new ListsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The login property</summary>
        public LoginRequestBuilder Login { get =>
            new LoginRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The movies property</summary>
        public MoviesRequestBuilder Movies { get =>
            new MoviesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The people property</summary>
        public PeopleRequestBuilder People { get =>
            new PeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search { get =>
            new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The seasons property</summary>
        public SeasonsRequestBuilder Seasons { get =>
            new SeasonsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The series property</summary>
        public SeriesRequestBuilder Series { get =>
            new SeriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sources property</summary>
        public SourcesRequestBuilder Sources { get =>
            new SourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The updates property</summary>
        public UpdatesRequestBuilder Updates { get =>
            new UpdatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public UserRequestBuilder User { get =>
            new UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new ApiClient and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "https://api4.thetvdb.com/v4";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}

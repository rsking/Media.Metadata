// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// The base record for a series. All series airs time like firstAired, lastAired, nextAired, etc. are in US EST for US series, and for all non-US series, the time of the showâ€™s country capital or most populous city. For streaming services, is the official release time. See https://support.thetvdb.com/kb/faq.php?id=29.
    /// </summary>
    public class SeriesBaseRecord : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ApiSdk.Models.Alias>? Aliases { get; set; }
#nullable restore
#else
        public List<ApiSdk.Models.Alias> Aliases { get; set; }
#endif
        /// <summary>The averageRuntime property</summary>
        public int? AverageRuntime { get; set; }
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The defaultSeasonType property</summary>
        public long? DefaultSeasonType { get; set; }
        /// <summary>The episodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ApiSdk.Models.EpisodeBaseRecord>? Episodes { get; set; }
#nullable restore
#else
        public List<ApiSdk.Models.EpisodeBaseRecord> Episodes { get; set; }
#endif
        /// <summary>The firstAired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAired { get; set; }
#nullable restore
#else
        public string FirstAired { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Image { get; set; }
#nullable restore
#else
        public string Image { get; set; }
#endif
        /// <summary>The isOrderRandomized property</summary>
        public bool? IsOrderRandomized { get; set; }
        /// <summary>The lastAired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastAired { get; set; }
#nullable restore
#else
        public string LastAired { get; set; }
#endif
        /// <summary>The lastUpdated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastUpdated { get; set; }
#nullable restore
#else
        public string LastUpdated { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nameTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NameTranslations { get; set; }
#nullable restore
#else
        public List<string> NameTranslations { get; set; }
#endif
        /// <summary>The nextAired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextAired { get; set; }
#nullable restore
#else
        public string NextAired { get; set; }
#endif
        /// <summary>The originalCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalCountry { get; set; }
#nullable restore
#else
        public string OriginalCountry { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The overviewTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OverviewTranslations { get; set; }
#nullable restore
#else
        public List<string> OverviewTranslations { get; set; }
#endif
        /// <summary>The score property</summary>
        public double? Score { get; set; }
        /// <summary>The slug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>status record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Status? Status { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Status Status { get; set; }
#endif
        /// <summary>The year property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Year { get; set; }
#nullable restore
#else
        public string Year { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="ApiSdk.Models.SeriesBaseRecord"/> and sets the default values.
        /// </summary>
        public SeriesBaseRecord()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.SeriesBaseRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.SeriesBaseRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.SeriesBaseRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aliases", n => { Aliases = n.GetCollectionOfObjectValues<ApiSdk.Models.Alias>(ApiSdk.Models.Alias.CreateFromDiscriminatorValue)?.ToList(); } },
                { "averageRuntime", n => { AverageRuntime = n.GetIntValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "defaultSeasonType", n => { DefaultSeasonType = n.GetLongValue(); } },
                { "episodes", n => { Episodes = n.GetCollectionOfObjectValues<ApiSdk.Models.EpisodeBaseRecord>(ApiSdk.Models.EpisodeBaseRecord.CreateFromDiscriminatorValue)?.ToList(); } },
                { "firstAired", n => { FirstAired = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "image", n => { Image = n.GetStringValue(); } },
                { "isOrderRandomized", n => { IsOrderRandomized = n.GetBoolValue(); } },
                { "lastAired", n => { LastAired = n.GetStringValue(); } },
                { "lastUpdated", n => { LastUpdated = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nameTranslations", n => { NameTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "nextAired", n => { NextAired = n.GetStringValue(); } },
                { "originalCountry", n => { OriginalCountry = n.GetStringValue(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "overviewTranslations", n => { OverviewTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "score", n => { Score = n.GetDoubleValue(); } },
                { "slug", n => { Slug = n.GetStringValue(); } },
                { "status", n => { Status = n.GetObjectValue<ApiSdk.Models.Status>(ApiSdk.Models.Status.CreateFromDiscriminatorValue); } },
                { "year", n => { Year = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ApiSdk.Models.Alias>("aliases", Aliases);
            writer.WriteIntValue("averageRuntime", AverageRuntime);
            writer.WriteStringValue("country", Country);
            writer.WriteLongValue("defaultSeasonType", DefaultSeasonType);
            writer.WriteCollectionOfObjectValues<ApiSdk.Models.EpisodeBaseRecord>("episodes", Episodes);
            writer.WriteStringValue("firstAired", FirstAired);
            writer.WriteIntValue("id", Id);
            writer.WriteStringValue("image", Image);
            writer.WriteBoolValue("isOrderRandomized", IsOrderRandomized);
            writer.WriteStringValue("lastAired", LastAired);
            writer.WriteStringValue("lastUpdated", LastUpdated);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("nameTranslations", NameTranslations);
            writer.WriteStringValue("nextAired", NextAired);
            writer.WriteStringValue("originalCountry", OriginalCountry);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteCollectionOfPrimitiveValues<string>("overviewTranslations", OverviewTranslations);
            writer.WriteDoubleValue("score", Score);
            writer.WriteStringValue("slug", Slug);
            writer.WriteObjectValue<ApiSdk.Models.Status>("status", Status);
            writer.WriteStringValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

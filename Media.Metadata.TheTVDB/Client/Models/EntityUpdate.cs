// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// entity update record
    /// </summary>
    public class EntityUpdate : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The entityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityType { get; set; }
#nullable restore
#else
        public string EntityType { get; set; }
#endif
        /// <summary>The extraInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExtraInfo { get; set; }
#nullable restore
#else
        public string ExtraInfo { get; set; }
#endif
        /// <summary>The mergeToEntityType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MergeToEntityType { get; set; }
#nullable restore
#else
        public string MergeToEntityType { get; set; }
#endif
        /// <summary>The mergeToId property</summary>
        public long? MergeToId { get; set; }
        /// <summary>The method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Method { get; set; }
#nullable restore
#else
        public string Method { get; set; }
#endif
        /// <summary>The methodInt property</summary>
        public int? MethodInt { get; set; }
        /// <summary>The recordId property</summary>
        public long? RecordId { get; set; }
        /// <summary>The recordType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>Only present for episodes records</summary>
        public long? SeriesId { get; set; }
        /// <summary>The timeStamp property</summary>
        public long? TimeStamp { get; set; }
        /// <summary>The userId property</summary>
        public int? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ApiSdk.Models.EntityUpdate"/> and sets the default values.
        /// </summary>
        public EntityUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.EntityUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.EntityUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.EntityUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "entityType", n => { EntityType = n.GetStringValue(); } },
                { "extraInfo", n => { ExtraInfo = n.GetStringValue(); } },
                { "mergeToEntityType", n => { MergeToEntityType = n.GetStringValue(); } },
                { "mergeToId", n => { MergeToId = n.GetLongValue(); } },
                { "method", n => { Method = n.GetStringValue(); } },
                { "methodInt", n => { MethodInt = n.GetIntValue(); } },
                { "recordId", n => { RecordId = n.GetLongValue(); } },
                { "recordType", n => { RecordType = n.GetStringValue(); } },
                { "seriesId", n => { SeriesId = n.GetLongValue(); } },
                { "timeStamp", n => { TimeStamp = n.GetLongValue(); } },
                { "userId", n => { UserId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("entityType", EntityType);
            writer.WriteStringValue("extraInfo", ExtraInfo);
            writer.WriteStringValue("mergeToEntityType", MergeToEntityType);
            writer.WriteLongValue("mergeToId", MergeToId);
            writer.WriteStringValue("method", Method);
            writer.WriteIntValue("methodInt", MethodInt);
            writer.WriteLongValue("recordId", RecordId);
            writer.WriteStringValue("recordType", RecordType);
            writer.WriteLongValue("seriesId", SeriesId);
            writer.WriteLongValue("timeStamp", TimeStamp);
            writer.WriteIntValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

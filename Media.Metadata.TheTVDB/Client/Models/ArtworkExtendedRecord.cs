// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// extended artwork record
    /// </summary>
    public class ArtworkExtendedRecord : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The episodeId property</summary>
        public int? EpisodeId { get; set; }
        /// <summary>The height property</summary>
        public long? Height { get; set; }
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Image { get; set; }
#nullable restore
#else
        public string Image { get; set; }
#endif
        /// <summary>The includesText property</summary>
        public bool? IncludesText { get; set; }
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The movieId property</summary>
        public int? MovieId { get; set; }
        /// <summary>The networkId property</summary>
        public int? NetworkId { get; set; }
        /// <summary>The peopleId property</summary>
        public int? PeopleId { get; set; }
        /// <summary>The score property</summary>
        public double? Score { get; set; }
        /// <summary>The seasonId property</summary>
        public int? SeasonId { get; set; }
        /// <summary>The seriesId property</summary>
        public int? SeriesId { get; set; }
        /// <summary>The seriesPeopleId property</summary>
        public int? SeriesPeopleId { get; set; }
        /// <summary>artwork status record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ArtworkStatus? Status { get; set; }
#nullable restore
#else
        public ArtworkStatus Status { get; set; }
#endif
        /// <summary>The tagOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TagOption>? TagOptions { get; set; }
#nullable restore
#else
        public List<TagOption> TagOptions { get; set; }
#endif
        /// <summary>The thumbnail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumbnail { get; set; }
#nullable restore
#else
        public string Thumbnail { get; set; }
#endif
        /// <summary>The thumbnailHeight property</summary>
        public long? ThumbnailHeight { get; set; }
        /// <summary>The thumbnailWidth property</summary>
        public long? ThumbnailWidth { get; set; }
        /// <summary>The artwork type corresponds to the ids from the /artwork/types endpoint.</summary>
        public long? Type { get; set; }
        /// <summary>The updatedAt property</summary>
        public long? UpdatedAt { get; set; }
        /// <summary>The width property</summary>
        public long? Width { get; set; }
        /// <summary>
        /// Instantiates a new ArtworkExtendedRecord and sets the default values.
        /// </summary>
        public ArtworkExtendedRecord() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ArtworkExtendedRecord CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ArtworkExtendedRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"episodeId", n => { EpisodeId = n.GetIntValue(); } },
                {"height", n => { Height = n.GetLongValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"image", n => { Image = n.GetStringValue(); } },
                {"includesText", n => { IncludesText = n.GetBoolValue(); } },
                {"language", n => { Language = n.GetStringValue(); } },
                {"movieId", n => { MovieId = n.GetIntValue(); } },
                {"networkId", n => { NetworkId = n.GetIntValue(); } },
                {"peopleId", n => { PeopleId = n.GetIntValue(); } },
                {"score", n => { Score = n.GetDoubleValue(); } },
                {"seasonId", n => { SeasonId = n.GetIntValue(); } },
                {"seriesId", n => { SeriesId = n.GetIntValue(); } },
                {"seriesPeopleId", n => { SeriesPeopleId = n.GetIntValue(); } },
                {"status", n => { Status = n.GetObjectValue<ArtworkStatus>(ArtworkStatus.CreateFromDiscriminatorValue); } },
                {"tagOptions", n => { TagOptions = n.GetCollectionOfObjectValues<TagOption>(TagOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"thumbnail", n => { Thumbnail = n.GetStringValue(); } },
                {"thumbnailHeight", n => { ThumbnailHeight = n.GetLongValue(); } },
                {"thumbnailWidth", n => { ThumbnailWidth = n.GetLongValue(); } },
                {"type", n => { Type = n.GetLongValue(); } },
                {"updatedAt", n => { UpdatedAt = n.GetLongValue(); } },
                {"width", n => { Width = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("episodeId", EpisodeId);
            writer.WriteLongValue("height", Height);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("image", Image);
            writer.WriteBoolValue("includesText", IncludesText);
            writer.WriteStringValue("language", Language);
            writer.WriteIntValue("movieId", MovieId);
            writer.WriteIntValue("networkId", NetworkId);
            writer.WriteIntValue("peopleId", PeopleId);
            writer.WriteDoubleValue("score", Score);
            writer.WriteIntValue("seasonId", SeasonId);
            writer.WriteIntValue("seriesId", SeriesId);
            writer.WriteIntValue("seriesPeopleId", SeriesPeopleId);
            writer.WriteObjectValue<ArtworkStatus>("status", Status);
            writer.WriteCollectionOfObjectValues<TagOption>("tagOptions", TagOptions);
            writer.WriteStringValue("thumbnail", Thumbnail);
            writer.WriteLongValue("thumbnailHeight", ThumbnailHeight);
            writer.WriteLongValue("thumbnailWidth", ThumbnailWidth);
            writer.WriteLongValue("type", Type);
            writer.WriteLongValue("updatedAt", UpdatedAt);
            writer.WriteLongValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

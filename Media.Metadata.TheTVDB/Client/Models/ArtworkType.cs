// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// artwork type record
    /// </summary>
    public class ArtworkType : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The height property</summary>
        public long? Height { get; set; }
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The imageFormat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageFormat { get; set; }
#nullable restore
#else
        public string ImageFormat { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The recordType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecordType { get; set; }
#nullable restore
#else
        public string RecordType { get; set; }
#endif
        /// <summary>The slug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Slug { get; set; }
#nullable restore
#else
        public string Slug { get; set; }
#endif
        /// <summary>The thumbHeight property</summary>
        public long? ThumbHeight { get; set; }
        /// <summary>The thumbWidth property</summary>
        public long? ThumbWidth { get; set; }
        /// <summary>The width property</summary>
        public long? Width { get; set; }
        /// <summary>
        /// Instantiates a new ArtworkType and sets the default values.
        /// </summary>
        public ArtworkType() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ArtworkType CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ArtworkType();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"height", n => { Height = n.GetLongValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"imageFormat", n => { ImageFormat = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"recordType", n => { RecordType = n.GetStringValue(); } },
                {"slug", n => { Slug = n.GetStringValue(); } },
                {"thumbHeight", n => { ThumbHeight = n.GetLongValue(); } },
                {"thumbWidth", n => { ThumbWidth = n.GetLongValue(); } },
                {"width", n => { Width = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("height", Height);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("imageFormat", ImageFormat);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("recordType", RecordType);
            writer.WriteStringValue("slug", Slug);
            writer.WriteLongValue("thumbHeight", ThumbHeight);
            writer.WriteLongValue("thumbWidth", ThumbWidth);
            writer.WriteLongValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

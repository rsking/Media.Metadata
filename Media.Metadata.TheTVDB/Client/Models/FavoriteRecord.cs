// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Favorites record
    /// </summary>
    public class FavoriteRecord : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The artwork property</summary>
        public int? Artwork { get; set; }
        /// <summary>The episode property</summary>
        public int? Episode { get; set; }
        /// <summary>The list property</summary>
        public int? List { get; set; }
        /// <summary>The movie property</summary>
        public int? Movie { get; set; }
        /// <summary>The people property</summary>
        public int? People { get; set; }
        /// <summary>The series property</summary>
        public int? Series { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ApiSdk.Models.FavoriteRecord"/> and sets the default values.
        /// </summary>
        public FavoriteRecord()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.FavoriteRecord"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.FavoriteRecord CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.FavoriteRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "artwork", n => { Artwork = n.GetIntValue(); } },
                { "episode", n => { Episode = n.GetIntValue(); } },
                { "list", n => { List = n.GetIntValue(); } },
                { "movie", n => { Movie = n.GetIntValue(); } },
                { "people", n => { People = n.GetIntValue(); } },
                { "series", n => { Series = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("artwork", Artwork);
            writer.WriteIntValue("episode", Episode);
            writer.WriteIntValue("list", List);
            writer.WriteIntValue("movie", Movie);
            writer.WriteIntValue("people", People);
            writer.WriteIntValue("series", Series);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

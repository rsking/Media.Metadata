// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// character record
    /// </summary>
    public class Character : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aliases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Alias>? Aliases { get; set; }
#nullable restore
#else
        public List<Alias> Aliases { get; set; }
#endif
        /// <summary>base record info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RecordInfo? Episode { get; set; }
#nullable restore
#else
        public RecordInfo Episode { get; set; }
#endif
        /// <summary>The episodeId property</summary>
        public int? EpisodeId { get; set; }
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Image { get; set; }
#nullable restore
#else
        public string Image { get; set; }
#endif
        /// <summary>The isFeatured property</summary>
        public bool? IsFeatured { get; set; }
        /// <summary>base record info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RecordInfo? Movie { get; set; }
#nullable restore
#else
        public RecordInfo Movie { get; set; }
#endif
        /// <summary>The movieId property</summary>
        public int? MovieId { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nameTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NameTranslations { get; set; }
#nullable restore
#else
        public List<string> NameTranslations { get; set; }
#endif
        /// <summary>The overviewTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OverviewTranslations { get; set; }
#nullable restore
#else
        public List<string> OverviewTranslations { get; set; }
#endif
        /// <summary>The peopleId property</summary>
        public int? PeopleId { get; set; }
        /// <summary>The peopleType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PeopleType { get; set; }
#nullable restore
#else
        public string PeopleType { get; set; }
#endif
        /// <summary>The personImgURL property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PersonImgURL { get; set; }
#nullable restore
#else
        public string PersonImgURL { get; set; }
#endif
        /// <summary>The personName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PersonName { get; set; }
#nullable restore
#else
        public string PersonName { get; set; }
#endif
        /// <summary>base record info</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RecordInfo? Series { get; set; }
#nullable restore
#else
        public RecordInfo Series { get; set; }
#endif
        /// <summary>The seriesId property</summary>
        public int? SeriesId { get; set; }
        /// <summary>The sort property</summary>
        public long? Sort { get; set; }
        /// <summary>The tagOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TagOption>? TagOptions { get; set; }
#nullable restore
#else
        public List<TagOption> TagOptions { get; set; }
#endif
        /// <summary>The type property</summary>
        public long? Type { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Character and sets the default values.
        /// </summary>
        public Character() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Character CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Character();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"aliases", n => { Aliases = n.GetCollectionOfObjectValues<Alias>(Alias.CreateFromDiscriminatorValue)?.ToList(); } },
                {"episode", n => { Episode = n.GetObjectValue<RecordInfo>(RecordInfo.CreateFromDiscriminatorValue); } },
                {"episodeId", n => { EpisodeId = n.GetIntValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"image", n => { Image = n.GetStringValue(); } },
                {"isFeatured", n => { IsFeatured = n.GetBoolValue(); } },
                {"movie", n => { Movie = n.GetObjectValue<RecordInfo>(RecordInfo.CreateFromDiscriminatorValue); } },
                {"movieId", n => { MovieId = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"nameTranslations", n => { NameTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"overviewTranslations", n => { OverviewTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"peopleId", n => { PeopleId = n.GetIntValue(); } },
                {"peopleType", n => { PeopleType = n.GetStringValue(); } },
                {"personImgURL", n => { PersonImgURL = n.GetStringValue(); } },
                {"personName", n => { PersonName = n.GetStringValue(); } },
                {"series", n => { Series = n.GetObjectValue<RecordInfo>(RecordInfo.CreateFromDiscriminatorValue); } },
                {"seriesId", n => { SeriesId = n.GetIntValue(); } },
                {"sort", n => { Sort = n.GetLongValue(); } },
                {"tagOptions", n => { TagOptions = n.GetCollectionOfObjectValues<TagOption>(TagOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"type", n => { Type = n.GetLongValue(); } },
                {"url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Alias>("aliases", Aliases);
            writer.WriteObjectValue<RecordInfo>("episode", Episode);
            writer.WriteIntValue("episodeId", EpisodeId);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("image", Image);
            writer.WriteBoolValue("isFeatured", IsFeatured);
            writer.WriteObjectValue<RecordInfo>("movie", Movie);
            writer.WriteIntValue("movieId", MovieId);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("nameTranslations", NameTranslations);
            writer.WriteCollectionOfPrimitiveValues<string>("overviewTranslations", OverviewTranslations);
            writer.WriteIntValue("peopleId", PeopleId);
            writer.WriteStringValue("peopleType", PeopleType);
            writer.WriteStringValue("personImgURL", PersonImgURL);
            writer.WriteStringValue("personName", PersonName);
            writer.WriteObjectValue<RecordInfo>("series", Series);
            writer.WriteIntValue("seriesId", SeriesId);
            writer.WriteLongValue("sort", Sort);
            writer.WriteCollectionOfObjectValues<TagOption>("tagOptions", TagOptions);
            writer.WriteLongValue("type", Type);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

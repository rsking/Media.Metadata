// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// search by remote reuslt is a base record for a movie, series, people, season or company search result
    /// </summary>
    public class SearchByRemoteIdResult : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A company record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ApiSdk.Models.Company? Company { get; set; }
#nullable restore
#else
        public ApiSdk.Models.Company Company { get; set; }
#endif
        /// <summary>base episode record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EpisodeBaseRecord? Episode { get; set; }
#nullable restore
#else
        public EpisodeBaseRecord Episode { get; set; }
#endif
        /// <summary>base movie record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MovieBaseRecord? Movie { get; set; }
#nullable restore
#else
        public MovieBaseRecord Movie { get; set; }
#endif
        /// <summary>base people record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PeopleBaseRecord? People { get; set; }
#nullable restore
#else
        public PeopleBaseRecord People { get; set; }
#endif
        /// <summary>The base record for a series. All series airs time like firstAired, lastAired, nextAired, etc. are in US EST for US series, and for all non-US series, the time of the showâ€™s country capital or most populous city. For streaming services, is the official release time. See https://support.thetvdb.com/kb/faq.php?id=29.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SeriesBaseRecord? Series { get; set; }
#nullable restore
#else
        public SeriesBaseRecord Series { get; set; }
#endif
        /// <summary>
        /// Instantiates a new SearchByRemoteIdResult and sets the default values.
        /// </summary>
        public SearchByRemoteIdResult() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SearchByRemoteIdResult CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SearchByRemoteIdResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"company", n => { Company = n.GetObjectValue<ApiSdk.Models.Company>(ApiSdk.Models.Company.CreateFromDiscriminatorValue); } },
                {"episode", n => { Episode = n.GetObjectValue<EpisodeBaseRecord>(EpisodeBaseRecord.CreateFromDiscriminatorValue); } },
                {"movie", n => { Movie = n.GetObjectValue<MovieBaseRecord>(MovieBaseRecord.CreateFromDiscriminatorValue); } },
                {"people", n => { People = n.GetObjectValue<PeopleBaseRecord>(PeopleBaseRecord.CreateFromDiscriminatorValue); } },
                {"series", n => { Series = n.GetObjectValue<SeriesBaseRecord>(SeriesBaseRecord.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ApiSdk.Models.Company>("company", Company);
            writer.WriteObjectValue<EpisodeBaseRecord>("episode", Episode);
            writer.WriteObjectValue<MovieBaseRecord>("movie", Movie);
            writer.WriteObjectValue<PeopleBaseRecord>("people", People);
            writer.WriteObjectValue<SeriesBaseRecord>("series", Series);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

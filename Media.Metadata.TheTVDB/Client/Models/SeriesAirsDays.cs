// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// A series airs day record
    /// </summary>
    public class SeriesAirsDays : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The friday property</summary>
        public bool? Friday { get; set; }
        /// <summary>The monday property</summary>
        public bool? Monday { get; set; }
        /// <summary>The saturday property</summary>
        public bool? Saturday { get; set; }
        /// <summary>The sunday property</summary>
        public bool? Sunday { get; set; }
        /// <summary>The thursday property</summary>
        public bool? Thursday { get; set; }
        /// <summary>The tuesday property</summary>
        public bool? Tuesday { get; set; }
        /// <summary>The wednesday property</summary>
        public bool? Wednesday { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ApiSdk.Models.SeriesAirsDays"/> and sets the default values.
        /// </summary>
        public SeriesAirsDays()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ApiSdk.Models.SeriesAirsDays"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ApiSdk.Models.SeriesAirsDays CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ApiSdk.Models.SeriesAirsDays();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "friday", n => { Friday = n.GetBoolValue(); } },
                { "monday", n => { Monday = n.GetBoolValue(); } },
                { "saturday", n => { Saturday = n.GetBoolValue(); } },
                { "sunday", n => { Sunday = n.GetBoolValue(); } },
                { "thursday", n => { Thursday = n.GetBoolValue(); } },
                { "tuesday", n => { Tuesday = n.GetBoolValue(); } },
                { "wednesday", n => { Wednesday = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("friday", Friday);
            writer.WriteBoolValue("monday", Monday);
            writer.WriteBoolValue("saturday", Saturday);
            writer.WriteBoolValue("sunday", Sunday);
            writer.WriteBoolValue("thursday", Thursday);
            writer.WriteBoolValue("tuesday", Tuesday);
            writer.WriteBoolValue("wednesday", Wednesday);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    /// <summary>
    /// extended episode record
    /// </summary>
    public class EpisodeExtendedRecord : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Aired { get; set; }
#nullable restore
#else
        public string Aired { get; set; }
#endif
        /// <summary>The airsAfterSeason property</summary>
        public int? AirsAfterSeason { get; set; }
        /// <summary>The airsBeforeEpisode property</summary>
        public int? AirsBeforeEpisode { get; set; }
        /// <summary>The airsBeforeSeason property</summary>
        public int? AirsBeforeSeason { get; set; }
        /// <summary>The awards property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AwardBaseRecord>? Awards { get; set; }
#nullable restore
#else
        public List<AwardBaseRecord> Awards { get; set; }
#endif
        /// <summary>The characters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Character>? Characters { get; set; }
#nullable restore
#else
        public List<Character> Characters { get; set; }
#endif
        /// <summary>The companies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Company>? Companies { get; set; }
#nullable restore
#else
        public List<Company> Companies { get; set; }
#endif
        /// <summary>The contentRatings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ContentRating>? ContentRatings { get; set; }
#nullable restore
#else
        public List<ContentRating> ContentRatings { get; set; }
#endif
        /// <summary>season, midseason, or series</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FinaleType { get; set; }
#nullable restore
#else
        public string FinaleType { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The image property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Image { get; set; }
#nullable restore
#else
        public string Image { get; set; }
#endif
        /// <summary>The imageType property</summary>
        public int? ImageType { get; set; }
        /// <summary>The isMovie property</summary>
        public long? IsMovie { get; set; }
        /// <summary>The lastUpdated property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastUpdated { get; set; }
#nullable restore
#else
        public string LastUpdated { get; set; }
#endif
        /// <summary>The linkedMovie property</summary>
        public int? LinkedMovie { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nameTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? NameTranslations { get; set; }
#nullable restore
#else
        public List<string> NameTranslations { get; set; }
#endif
        /// <summary>The networks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Company>? Networks { get; set; }
#nullable restore
#else
        public List<Company> Networks { get; set; }
#endif
        /// <summary>The nominations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AwardNomineeBaseRecord>? Nominations { get; set; }
#nullable restore
#else
        public List<AwardNomineeBaseRecord> Nominations { get; set; }
#endif
        /// <summary>The number property</summary>
        public int? Number { get; set; }
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The overviewTranslations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OverviewTranslations { get; set; }
#nullable restore
#else
        public List<string> OverviewTranslations { get; set; }
#endif
        /// <summary>The productionCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductionCode { get; set; }
#nullable restore
#else
        public string ProductionCode { get; set; }
#endif
        /// <summary>The remoteIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RemoteID>? RemoteIds { get; set; }
#nullable restore
#else
        public List<RemoteID> RemoteIds { get; set; }
#endif
        /// <summary>The runtime property</summary>
        public int? Runtime { get; set; }
        /// <summary>The seasonNumber property</summary>
        public int? SeasonNumber { get; set; }
        /// <summary>The seasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SeasonBaseRecord>? Seasons { get; set; }
#nullable restore
#else
        public List<SeasonBaseRecord> Seasons { get; set; }
#endif
        /// <summary>The seriesId property</summary>
        public long? SeriesId { get; set; }
        /// <summary>The studios property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Company>? Studios { get; set; }
#nullable restore
#else
        public List<Company> Studios { get; set; }
#endif
        /// <summary>The tagOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TagOption>? TagOptions { get; set; }
#nullable restore
#else
        public List<TagOption> TagOptions { get; set; }
#endif
        /// <summary>The trailers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Trailer>? Trailers { get; set; }
#nullable restore
#else
        public List<Trailer> Trailers { get; set; }
#endif
        /// <summary>translation extended record</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TranslationExtended? Translations { get; set; }
#nullable restore
#else
        public TranslationExtended Translations { get; set; }
#endif
        /// <summary>The year property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Year { get; set; }
#nullable restore
#else
        public string Year { get; set; }
#endif
        /// <summary>
        /// Instantiates a new EpisodeExtendedRecord and sets the default values.
        /// </summary>
        public EpisodeExtendedRecord() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EpisodeExtendedRecord CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EpisodeExtendedRecord();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"aired", n => { Aired = n.GetStringValue(); } },
                {"airsAfterSeason", n => { AirsAfterSeason = n.GetIntValue(); } },
                {"airsBeforeEpisode", n => { AirsBeforeEpisode = n.GetIntValue(); } },
                {"airsBeforeSeason", n => { AirsBeforeSeason = n.GetIntValue(); } },
                {"awards", n => { Awards = n.GetCollectionOfObjectValues<AwardBaseRecord>(AwardBaseRecord.CreateFromDiscriminatorValue)?.ToList(); } },
                {"characters", n => { Characters = n.GetCollectionOfObjectValues<Character>(Character.CreateFromDiscriminatorValue)?.ToList(); } },
                {"companies", n => { Companies = n.GetCollectionOfObjectValues<Company>(Company.CreateFromDiscriminatorValue)?.ToList(); } },
                {"contentRatings", n => { ContentRatings = n.GetCollectionOfObjectValues<ContentRating>(ContentRating.CreateFromDiscriminatorValue)?.ToList(); } },
                {"finaleType", n => { FinaleType = n.GetStringValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"image", n => { Image = n.GetStringValue(); } },
                {"imageType", n => { ImageType = n.GetIntValue(); } },
                {"isMovie", n => { IsMovie = n.GetLongValue(); } },
                {"lastUpdated", n => { LastUpdated = n.GetStringValue(); } },
                {"linkedMovie", n => { LinkedMovie = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"nameTranslations", n => { NameTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"networks", n => { Networks = n.GetCollectionOfObjectValues<Company>(Company.CreateFromDiscriminatorValue)?.ToList(); } },
                {"nominations", n => { Nominations = n.GetCollectionOfObjectValues<AwardNomineeBaseRecord>(AwardNomineeBaseRecord.CreateFromDiscriminatorValue)?.ToList(); } },
                {"number", n => { Number = n.GetIntValue(); } },
                {"overview", n => { Overview = n.GetStringValue(); } },
                {"overviewTranslations", n => { OverviewTranslations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"productionCode", n => { ProductionCode = n.GetStringValue(); } },
                {"remoteIds", n => { RemoteIds = n.GetCollectionOfObjectValues<RemoteID>(RemoteID.CreateFromDiscriminatorValue)?.ToList(); } },
                {"runtime", n => { Runtime = n.GetIntValue(); } },
                {"seasonNumber", n => { SeasonNumber = n.GetIntValue(); } },
                {"seasons", n => { Seasons = n.GetCollectionOfObjectValues<SeasonBaseRecord>(SeasonBaseRecord.CreateFromDiscriminatorValue)?.ToList(); } },
                {"seriesId", n => { SeriesId = n.GetLongValue(); } },
                {"studios", n => { Studios = n.GetCollectionOfObjectValues<Company>(Company.CreateFromDiscriminatorValue)?.ToList(); } },
                {"tagOptions", n => { TagOptions = n.GetCollectionOfObjectValues<TagOption>(TagOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"trailers", n => { Trailers = n.GetCollectionOfObjectValues<Trailer>(Trailer.CreateFromDiscriminatorValue)?.ToList(); } },
                {"translations", n => { Translations = n.GetObjectValue<TranslationExtended>(TranslationExtended.CreateFromDiscriminatorValue); } },
                {"year", n => { Year = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("aired", Aired);
            writer.WriteIntValue("airsAfterSeason", AirsAfterSeason);
            writer.WriteIntValue("airsBeforeEpisode", AirsBeforeEpisode);
            writer.WriteIntValue("airsBeforeSeason", AirsBeforeSeason);
            writer.WriteCollectionOfObjectValues<AwardBaseRecord>("awards", Awards);
            writer.WriteCollectionOfObjectValues<Character>("characters", Characters);
            writer.WriteCollectionOfObjectValues<Company>("companies", Companies);
            writer.WriteCollectionOfObjectValues<ContentRating>("contentRatings", ContentRatings);
            writer.WriteStringValue("finaleType", FinaleType);
            writer.WriteLongValue("id", Id);
            writer.WriteStringValue("image", Image);
            writer.WriteIntValue("imageType", ImageType);
            writer.WriteLongValue("isMovie", IsMovie);
            writer.WriteStringValue("lastUpdated", LastUpdated);
            writer.WriteIntValue("linkedMovie", LinkedMovie);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("nameTranslations", NameTranslations);
            writer.WriteCollectionOfObjectValues<Company>("networks", Networks);
            writer.WriteCollectionOfObjectValues<AwardNomineeBaseRecord>("nominations", Nominations);
            writer.WriteIntValue("number", Number);
            writer.WriteStringValue("overview", Overview);
            writer.WriteCollectionOfPrimitiveValues<string>("overviewTranslations", OverviewTranslations);
            writer.WriteStringValue("productionCode", ProductionCode);
            writer.WriteCollectionOfObjectValues<RemoteID>("remoteIds", RemoteIds);
            writer.WriteIntValue("runtime", Runtime);
            writer.WriteIntValue("seasonNumber", SeasonNumber);
            writer.WriteCollectionOfObjectValues<SeasonBaseRecord>("seasons", Seasons);
            writer.WriteLongValue("seriesId", SeriesId);
            writer.WriteCollectionOfObjectValues<Company>("studios", Studios);
            writer.WriteCollectionOfObjectValues<TagOption>("tagOptions", TagOptions);
            writer.WriteCollectionOfObjectValues<Trailer>("trailers", Trailers);
            writer.WriteObjectValue<TranslationExtended>("translations", Translations);
            writer.WriteStringValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
